#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from hazelcast.remotecontroller import RemoteController
from hazelcast.remotecontroller.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  bool ping()')
  print('  bool clean()')
  print('  bool exit()')
  print('  Cluster createCluster(string hzVersion, string xmlconfig)')
  print('  Member startMember(string clusterId, i32 delay)')
  print('  bool shutdownMember(string clusterId, string memberId, i32 delay)')
  print('  bool terminateMember(string clusterId, string memberId, i32 delay)')
  print('  bool shutdownCluster(string clusterId, i32 delay)')
  print('  bool terminateCluster(string clusterId, i32 delay)')
  print('  Cluster splitMemberFromCluster(string memberId, i32 delay)')
  print('  Cluster mergeMemberToCluster(string clusterId, string memberId, i32 delay)')
  print('  bool executeOnController(string clusterId, string script, Lang lang)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RemoteController.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'clean':
  if len(args) != 0:
    print('clean requires 0 args')
    sys.exit(1)
  pp.pprint(client.clean())

elif cmd == 'exit':
  if len(args) != 0:
    print('exit requires 0 args')
    sys.exit(1)
  pp.pprint(client.exit())

elif cmd == 'createCluster':
  if len(args) != 2:
    print('createCluster requires 2 args')
    sys.exit(1)
  pp.pprint(client.createCluster(args[0],args[1],))

elif cmd == 'startMember':
  if len(args) != 2:
    print('startMember requires 2 args')
    sys.exit(1)
  pp.pprint(client.startMember(args[0],eval(args[1]),))

elif cmd == 'shutdownMember':
  if len(args) != 3:
    print('shutdownMember requires 3 args')
    sys.exit(1)
  pp.pprint(client.shutdownMember(args[0],args[1],eval(args[2]),))

elif cmd == 'terminateMember':
  if len(args) != 3:
    print('terminateMember requires 3 args')
    sys.exit(1)
  pp.pprint(client.terminateMember(args[0],args[1],eval(args[2]),))

elif cmd == 'shutdownCluster':
  if len(args) != 2:
    print('shutdownCluster requires 2 args')
    sys.exit(1)
  pp.pprint(client.shutdownCluster(args[0],eval(args[1]),))

elif cmd == 'terminateCluster':
  if len(args) != 2:
    print('terminateCluster requires 2 args')
    sys.exit(1)
  pp.pprint(client.terminateCluster(args[0],eval(args[1]),))

elif cmd == 'splitMemberFromCluster':
  if len(args) != 2:
    print('splitMemberFromCluster requires 2 args')
    sys.exit(1)
  pp.pprint(client.splitMemberFromCluster(args[0],eval(args[1]),))

elif cmd == 'mergeMemberToCluster':
  if len(args) != 3:
    print('mergeMemberToCluster requires 3 args')
    sys.exit(1)
  pp.pprint(client.mergeMemberToCluster(args[0],args[1],eval(args[2]),))

elif cmd == 'executeOnController':
  if len(args) != 3:
    print('executeOnController requires 3 args')
    sys.exit(1)
  pp.pprint(client.executeOnController(args[0],args[1],eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
